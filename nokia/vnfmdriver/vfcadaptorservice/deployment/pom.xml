<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2016, Nokia Corporation.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.onap.vfc.nfvo.driver.vnfm.svnfm</groupId>
        <artifactId>vfcadaptor-service</artifactId>
        <version>1.3.1-SNAPSHOT</version>
    </parent>

    <artifactId>vfcadaptor-deployment</artifactId>
    <packaging>pom</packaging>
    
    <name>vfc/nfvo/driver/vnfm/svnfm/nokia/vnfmdriver/vfcadaptorservice/deployment</name>
    <description>svnfm vnfm driver deployment</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <version>1.5</version>
                <executions>
                    <execution>
                        <id>vfcadaptor package</id>
                        <phase>package</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                System.out.println("******** Going to make release zip ********")

                                deployFolder =
                                "${project.build.directory}/deployoutput"
                                deployUnzip =
                                "${project.build.directory}/deployunzip"
                                outfileName =
                                "${package.name}-${project.version}.zip"
                                ant.delete(dir: "${deployFolder}")
                                ant.mkdir(dir:
                                "${deployFolder}")

                                ant.delete(dir: "${deployUnzip}")
                                ant.mkdir(dir: "${deployUnzip}")

                                ant.mkdir(dir:
                                "${deployUnzip}/webapps/")
                                ant.mkdir(dir: "${deployUnzip}/webapps/ROOT")
                                ant.mkdir(dir:
                                "${deployUnzip}/logs")
                                
                                System.out.println("******** start copying from ${basedir}/src/main/release to ${deployUnzip}. ************")

                                ant.copy(todir: "${deployUnzip}") {
                                fileset(dir: "${basedir}/src/main/release"){
                                exclude(name: "**/.gitignore")
                                }
                                }
                                ant.copy(todir: "${deployUnzip}/docker") {
                                fileset(dir: "${basedir}/../docker"){
                                exclude(name: "**/.gitignore")
                                }
                                }
                                
                                System.out.println("******** start copying from ${project.build.directory}/../../vfcadaptor/target/${package.name}-${project.version} to ${deployUnzip}/webapps/ROOT. ************")
                                ant.copy(todir:
                                "${deployUnzip}/webapps/ROOT") {
                                fileset(dir:
                                "${project.build.directory}/../../vfcadaptor/target/${package.name}-${project.version}")
                                }

                                System.out.println("******** start zipping from ${deployUnzip} to ${deployFolder}/${outfileName}. ************")
                                ant.zip(destfile:
                                "${deployFolder}/${outfileName}") {
                                fileset(dir: "${deployUnzip}")
                                }
                                System.out.println("******** completed. ************")
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>attach-artifacts</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attach-artifact</goal>
                        </goals>
                        <configuration>
                            <artifacts>
                                <artifact>
                                    <file>${project.build.directory}/deployoutput/${package.name}-${project.version}.zip</file>
                                    <type>zip</type>
                                </artifact>
                            </artifacts>
                        </configuration>
                    </execution>
                </executions>
            </plugin>



        </plugins>
    </build>
</project>
